package com.Lbins.TvApp.dao;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;
import com.Lbins.TvApp.dao.*;
import com.Lbins.TvApp.dao.AdObjDao;
import com.Lbins.TvApp.dao.CityObjDao;
import com.Lbins.TvApp.dao.DaoSession;
import com.Lbins.TvApp.dao.EmpDao;
import com.Lbins.TvApp.dao.EmpDianpuDao;
import com.Lbins.TvApp.dao.ManagerInfoDao;
import com.Lbins.TvApp.dao.MinePicObjDao;
import com.Lbins.TvApp.dao.RecordDao;
import com.Lbins.TvApp.dao.VideosDao;
import com.Lbins.TvApp.dao.XixunObjDao;
import de.greenrobot.dao.AbstractDaoMaster;
import de.greenrobot.dao.identityscope.IdentityScopeType;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * Master of DAO (schema version 1): knows all DAOs.
*/
public class DaoMaster extends AbstractDaoMaster {
    public static final int SCHEMA_VERSION = 1;

    /** Creates underlying database table using DAOs. */
    public static void createAllTables(SQLiteDatabase db, boolean ifNotExists) {
        com.Lbins.TvApp.dao.EmpDao.createTable(db, ifNotExists);
        XixunObjDao.createTable(db, ifNotExists);
        RecordDao.createTable(db, ifNotExists);
        VideosDao.createTable(db, ifNotExists);
        EmpDianpuDao.createTable(db, ifNotExists);
        ManagerInfoDao.createTable(db, ifNotExists);
        AdObjDao.createTable(db, ifNotExists);
        MinePicObjDao.createTable(db, ifNotExists);
        CityObjDao.createTable(db, ifNotExists);
    }

    /** Drops underlying database table using DAOs. */
    public static void dropAllTables(SQLiteDatabase db, boolean ifExists) {
        com.Lbins.TvApp.dao.EmpDao.dropTable(db, ifExists);
        XixunObjDao.dropTable(db, ifExists);
        RecordDao.dropTable(db, ifExists);
        VideosDao.dropTable(db, ifExists);
        EmpDianpuDao.dropTable(db, ifExists);
        ManagerInfoDao.dropTable(db, ifExists);
        AdObjDao.dropTable(db, ifExists);
        MinePicObjDao.dropTable(db, ifExists);
        CityObjDao.dropTable(db, ifExists);
    }

    public static abstract class OpenHelper extends SQLiteOpenHelper {

        public OpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory, SCHEMA_VERSION);
        }

        @Override
        public void onCreate(SQLiteDatabase db) {
            Log.i("greenDAO", "Creating tables for schema version " + SCHEMA_VERSION);
            createAllTables(db, false);
        }
    }

    /** WARNING: Drops all table on Upgrade! Use only during development. */
    public static class DevOpenHelper extends OpenHelper {
        public DevOpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory);
        }

        @Override
        public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
            Log.i("greenDAO", "Upgrading schema from version " + oldVersion + " to " + newVersion + " by dropping all tables");
            dropAllTables(db, true);
            onCreate(db);
        }
    }

    public DaoMaster(SQLiteDatabase db) {
        super(db, SCHEMA_VERSION);
        registerDaoClass(EmpDao.class);
        registerDaoClass(XixunObjDao.class);
        registerDaoClass(RecordDao.class);
        registerDaoClass(VideosDao.class);
        registerDaoClass(EmpDianpuDao.class);
        registerDaoClass(ManagerInfoDao.class);
        registerDaoClass(AdObjDao.class);
        registerDaoClass(MinePicObjDao.class);
        registerDaoClass(CityObjDao.class);
    }

    public DaoSession newSession() {
        return new DaoSession(db, IdentityScopeType.Session, daoConfigMap);
    }

    public DaoSession newSession(IdentityScopeType type) {
        return new DaoSession(db, type, daoConfigMap);
    }
    
}
