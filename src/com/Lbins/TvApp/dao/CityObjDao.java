package com.Lbins.TvApp.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import com.Lbins.TvApp.dao.DaoSession;
import com.Lbins.TvApp.module.CityObj;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table CITY_OBJ.
*/
public class CityObjDao extends AbstractDao<CityObj, String> {

    public static final String TABLENAME = "CITY_OBJ";

    /**
     * Properties of entity CityObj.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property CityID = new Property(1, String.class, "cityID", false, "CITY_ID");
        public final static Property City = new Property(2, String.class, "city", false, "CITY");
        public final static Property Father = new Property(3, String.class, "father", false, "FATHER");
        public final static Property ProvinceName = new Property(4, String.class, "provinceName", false, "PROVINCE_NAME");
        public final static Property Topnum = new Property(5, String.class, "topnum", false, "TOPNUM");
    };

    private DaoSession daoSession;


    public CityObjDao(DaoConfig config) {
        super(config);
    }
    
    public CityObjDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CITY_OBJ' (" + //
                "'ID' TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "'CITY_ID' TEXT NOT NULL ," + // 1: cityID
                "'CITY' TEXT NOT NULL ," + // 2: city
                "'FATHER' TEXT NOT NULL ," + // 3: father
                "'PROVINCE_NAME' TEXT NOT NULL ," + // 4: provinceName
                "'TOPNUM' TEXT NOT NULL );"); // 5: topnum
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CITY_OBJ'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, CityObj entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getId());
        stmt.bindString(2, entity.getCityID());
        stmt.bindString(3, entity.getCity());
        stmt.bindString(4, entity.getFather());
        stmt.bindString(5, entity.getProvinceName());
        stmt.bindString(6, entity.getTopnum());
    }

    @Override
    protected void attachEntity(CityObj entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public CityObj readEntity(Cursor cursor, int offset) {
        CityObj entity = new CityObj( //
            cursor.getString(offset + 0), // id
            cursor.getString(offset + 1), // cityID
            cursor.getString(offset + 2), // city
            cursor.getString(offset + 3), // father
            cursor.getString(offset + 4), // provinceName
            cursor.getString(offset + 5) // topnum
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, CityObj entity, int offset) {
        entity.setId(cursor.getString(offset + 0));
        entity.setCityID(cursor.getString(offset + 1));
        entity.setCity(cursor.getString(offset + 2));
        entity.setFather(cursor.getString(offset + 3));
        entity.setProvinceName(cursor.getString(offset + 4));
        entity.setTopnum(cursor.getString(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(CityObj entity, long rowId) {
        return entity.getId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(CityObj entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
