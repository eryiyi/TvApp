package com.Lbins.TvApp.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import com.Lbins.TvApp.dao.*;
import com.Lbins.TvApp.dao.DaoSession;
import com.Lbins.TvApp.module.MinePicObj;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table MINE_PIC_OBJ.
*/
public class MinePicObjDao extends AbstractDao<MinePicObj, String> {

    public static final String TABLENAME = "MINE_PIC_OBJ";

    /**
     * Properties of entity MinePicObj.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property PicStr = new Property(0, String.class, "picStr", true, "PIC_STR");
        public final static Property Mm_emp_id = new Property(1, String.class, "mm_emp_id", false, "MM_EMP_ID");
    };

    private com.Lbins.TvApp.dao.DaoSession daoSession;


    public MinePicObjDao(DaoConfig config) {
        super(config);
    }

    public MinePicObjDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'MINE_PIC_OBJ' (" + //
                "'PIC_STR' TEXT PRIMARY KEY NOT NULL ," + // 0: picStr
                "'MM_EMP_ID' TEXT NOT NULL );"); // 1: mm_emp_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'MINE_PIC_OBJ'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, MinePicObj entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getPicStr());
        stmt.bindString(2, entity.getMm_emp_id());
    }

    @Override
    protected void attachEntity(MinePicObj entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public MinePicObj readEntity(Cursor cursor, int offset) {
        MinePicObj entity = new MinePicObj( //
            cursor.getString(offset + 0), // picStr
            cursor.getString(offset + 1) // mm_emp_id
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, MinePicObj entity, int offset) {
        entity.setPicStr(cursor.getString(offset + 0));
        entity.setMm_emp_id(cursor.getString(offset + 1));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(MinePicObj entity, long rowId) {
        return entity.getPicStr();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(MinePicObj entity) {
        if(entity != null) {
            return entity.getPicStr();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
