package com.Lbins.TvApp.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import com.Lbins.TvApp.dao.*;
import com.Lbins.TvApp.dao.DaoSession;
import com.Lbins.TvApp.module.AdObj;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table AD_OBJ.
*/
public class AdObjDao extends AbstractDao<AdObj, String> {

    public static final String TABLENAME = "AD_OBJ";

    /**
     * Properties of entity AdObj.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Mm_ad_id = new Property(0, String.class, "mm_ad_id", true, "MM_AD_ID");
        public final static Property Mm_ad_url = new Property(1, String.class, "mm_ad_url", false, "MM_AD_URL");
        public final static Property Mm_ad_pic = new Property(2, String.class, "mm_ad_pic", false, "MM_AD_PIC");
        public final static Property Mm_ad_type = new Property(3, String.class, "mm_ad_type", false, "MM_AD_TYPE");
        public final static Property Mm_ad_num = new Property(4, String.class, "mm_ad_num", false, "MM_AD_NUM");
    };

    private com.Lbins.TvApp.dao.DaoSession daoSession;


    public AdObjDao(DaoConfig config) {
        super(config);
    }

    public AdObjDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'AD_OBJ' (" + //
                "'MM_AD_ID' TEXT PRIMARY KEY NOT NULL ," + // 0: mm_ad_id
                "'MM_AD_URL' TEXT," + // 1: mm_ad_url
                "'MM_AD_PIC' TEXT," + // 2: mm_ad_pic
                "'MM_AD_TYPE' TEXT," + // 3: mm_ad_type
                "'MM_AD_NUM' TEXT);"); // 4: mm_ad_num
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'AD_OBJ'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, AdObj entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getMm_ad_id());
 
        String mm_ad_url = entity.getMm_ad_url();
        if (mm_ad_url != null) {
            stmt.bindString(2, mm_ad_url);
        }
 
        String mm_ad_pic = entity.getMm_ad_pic();
        if (mm_ad_pic != null) {
            stmt.bindString(3, mm_ad_pic);
        }
 
        String mm_ad_type = entity.getMm_ad_type();
        if (mm_ad_type != null) {
            stmt.bindString(4, mm_ad_type);
        }
 
        String mm_ad_num = entity.getMm_ad_num();
        if (mm_ad_num != null) {
            stmt.bindString(5, mm_ad_num);
        }
    }

    @Override
    protected void attachEntity(AdObj entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public AdObj readEntity(Cursor cursor, int offset) {
        AdObj entity = new AdObj( //
            cursor.getString(offset + 0), // mm_ad_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // mm_ad_url
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // mm_ad_pic
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // mm_ad_type
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // mm_ad_num
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, AdObj entity, int offset) {
        entity.setMm_ad_id(cursor.getString(offset + 0));
        entity.setMm_ad_url(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMm_ad_pic(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMm_ad_type(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMm_ad_num(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(AdObj entity, long rowId) {
        return entity.getMm_ad_id();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(AdObj entity) {
        if(entity != null) {
            return entity.getMm_ad_id();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
